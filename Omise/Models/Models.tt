<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var path = Host.TemplateFile.Replace("Models.tt", "Models.txt");
    var models = new List<ModelData>();
    using (var stream = new FileStream(path, FileMode.Open))
    using (var reader = new StreamReader(stream)) {
        ModelData lastModel = null;

        string line;
        while ((line = reader.ReadLine()) != null) {
            var columns = line.Trim().Split(new char[] { ' ' });

            if (line.StartsWith(" ")) { // a field line
                var fieldName = columns[0];
                var fieldType = columns[1];
                var fieldJsonName = fieldName.ToLower();
                if (columns.Length > 2) {
                    fieldJsonName = columns[2];
                }

                lastModel.Fields.Add(new FieldData
                {
                    Name = fieldName,
                    Type = fieldType,
                    JsonAlias = fieldJsonName,
                });

            } else { // a new model
                var modelName = columns[0];
                var modelAlias = modelName.ToLower();
                if (columns.Length > 1) {
                    modelAlias = columns[1];
                }

                ModelData model = new ModelData
                {
                    Name = modelName,
                    ApiAlias = modelAlias,
                    Fields = new List<FieldData>()
                };

                models.Add(model);
                lastModel = model;
            }
        }
    }
#>
// <auto-generated />
// Generated from /Omise/Models/Models.tt
// on <#= DateTime.Now.ToString() #>
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Omise.Models {
<# foreach (var model in models) { #>
    public partial class <#= model.Name #> : ModelBase {
<# foreach (var field in model.Fields) { #>
        [JsonProperty("<#= field.JsonAlias #>")]
        public <#= field.Type #> <#= field.Name #> { get; set; }
<# } #>

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as <#= model.Name #>;
            if (another == null) return false;

            return base.Equals(obj) &&
<# foreach (var field in model.Fields) { #>
                object.Equals(this.<#= field.Name #>, another.<#= field.Name #>) &&
<# } #>
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
<# foreach (var field in model.Fields) { #>
                if (<#= field.Name #> != default(<#= field.Type #>)) {
                    hash = hash * 23 + <#= field.Name #>.GetHashCode();
                }
<# } #>

                return hash;
            }
        }
    }

<# } #>

    public partial class ModelTypes {
        static readonly IDictionary<string, Type> lookup = new Dictionary<string, Type>
        {
<# foreach (var model in models) { #>
            { "<#= model.ApiAlias #>", typeof(<#= model.Name #>) },
<# } #>
        };

        static readonly IDictionary<Type, string> reverseLookup = new Dictionary<Type, string>
        {
<# foreach (var model in models) { #>
            { typeof(<#= model.Name #>), "<#= model.ApiAlias #>" },
<# } #>
        };
    }
}
<#+
    public class FieldData {
        public string Name { get; set; }
        public string Type { get; set; }
        public string JsonAlias { get; set; }
    }

    public class ModelData {
        public string Name { get; set; }
        public string ApiAlias { get; set; }
        public IList<FieldData> Fields { get; set; }
    }
#>